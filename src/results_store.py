import csv
import os
from datetime import datetime

class ResultsStore:
    """
    Class to store and manage query processing results in a CSV file.
    """
    def __init__(self, filename="results.csv"):
        """
        Initialize a new ResultsStore with a specified filename.

        Args:
            filename (str): Name of the CSV file to store results
        """
        self.filename = filename
        self.results = []
        self.headers = ["Timestamp", "QueryID", "CustomerQuery", "ExpectedCategory",
                       "GeneratedCategory", "IsCorrect"]

        # Create the file with headers if it doesn't exist
        #if not os.path.exists(self.filename):
        self._write_headers()

    def _write_headers(self):
        """Write the CSV headers to the file."""
        with open(self.filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(self.headers)

    def add_result(self, query_id, customer_query, expected_category, generated_category):
        """
        Add a new query processing result.

        Args:
            query_id (str): The ID of the query
            customer_query (str): The customer's query text
            expected_category (str): The expected category
            generated_category (str): The category generated by the model
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        is_correct = expected_category == generated_category

        result = {
            "Timestamp": timestamp,
            "QueryID": query_id,
            "CustomerQuery": customer_query,
            "ExpectedCategory": expected_category,
            "GeneratedCategory": generated_category,
            "IsCorrect": "Pass" if is_correct else "Fail"
        }

        self.results.append(result)

        # Append the result to the CSV file immediately
        self._append_result_to_csv(result)

        return is_correct

    def _append_result_to_csv(self, result):
        """
        Append a single result to the CSV file.

        Args:
            result (dict): The result to append
        """
        with open(self.filename, 'a', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            row = [result[header] for header in self.headers]
            writer.writerow(row)

    def save_all(self):
        """
        Save all stored results to the CSV file.
        This is useful if results were not being appended immediately.
        """
        # Start with headers
        with open(self.filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(self.headers)

            # Write all results
            for result in self.results:
                row = [result[header] for header in self.headers]
                writer.writerow(row)

    def get_summary(self):
        """
        Get a summary of the results.

        Returns:
            dict: A dictionary with summary statistics
        """
        total = len(self.results)
        correct = sum(1 for result in self.results if result["IsCorrect"] == "Pass")

        return {
            "total": total,
            "correct": correct,
            "accuracy": correct / total if total > 0 else 0,
            "incorrect": total - correct
        }

    def __str__(self):
        """Return a string representation of the results summary."""
        summary = self.get_summary()
        return (f"Results Summary:\n"
                f"Total Queries: {summary['total']}\n"
                f"Correct: {summary['correct']}\n"
                f"Incorrect: {summary['incorrect']}\n"
                f"Accuracy: {summary['accuracy']:.2%}\n"
                f"Results saved to: {self.filename}")
